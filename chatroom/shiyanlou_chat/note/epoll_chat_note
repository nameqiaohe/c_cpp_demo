============ epoll 实现聊天室 ============
1、环境
	Linux ( Ubuntu15.04 )

2、介绍
	(1) 一个简单的聊天室：服务端 + 客户端

	(2) 不涉及以下部分
		线程池、多线程编程、超时重传、确认收包

	(3) 主要用于了解 C/S 模型，以及 epoll的使用

3、服务端
	(1) 支持多个用户接入，实现 聊天的基本功能

	(2) 使用 epoll 机制实现 并发，增加效率

4、客户端
	(1) 支持用户输入聊天信息
	(2) 显示其他用户发来的消息
	(3) 使用 fork创建两个进程
		子进程的功能：
			等待用户输入聊天信息
			将聊天信息写入 pipe，并发给父进程

		父进程的功能：
			使用 epoll机制接收 Server发来的消息，并显示给用户
			将子进程发来的消息从 pipe中读出，并发给Server

5、代码文件说明
	3个文件：
		server.cpp 服务端
		client.cpp 客户端
		utility.h 包含server 和 client斗湖用到的一些头文件、变量声明、函数、宏
		
		server、client共同的头文件：
			<sys/types.h>
			<sys/wait.h>
			<sys/socket.h>
			<arpa/inet.h>
			<sys/epoll.h>
			<fcntl.h>
			<errno.h>
			<stdio.h>
			<stdlib.h>
			<string.h>
			<time.h>

6、C/S模型
	简单介绍一下 服务端、客户端采用的经典C/S模型，以及 TCP/IP

	参考 C-S模型.png

	TCP 服务端通信常规步骤：
		Step 1：使用 socket() 创建 TCP 套接字 listenfd
		Step 2：将创建的套接字 绑定到一个本地IP 和 端口上	bind()
		Step 3：监听端口上的连接请求	listen()
		Step 4：当请求到来时，接受连接请求，返回一个对应于此次连接的新的套接字	accept()
		Step 5：用 accept() 返回的套接字 和 客户端进行通信
			使用 write()/send()、recv()/read()
		Step 6：返回，等待另一个连接请求
		Step 7：通信结束，关闭套接字	close()

	TCP 客户端通信的常规步骤：
		Step 1：创建套接字	socket()
		Step 2：使用 connect() 向服务端发起连接请求
		Step 3：连接成功，进行通信
			使用 write()/send()、recv()/read()
		Step 4：通信结束，关闭套接字	close()
	
7、阻塞、非阻塞socket
	通常，一个文件描述符指定的文件/设备，有两种工作方式：阻塞、非阻塞。
	
	阻塞：当试图对该文件描述符进行读写时，若当前没有数据可读、或暂时不可写，程序就进入等待，直到有东西可读 或 可写为止。

	非阻塞：如果没有数据可读、或者不可写，读写函数马上返回，而不会等待。

	阻塞 与 非阻塞的区别：是否立即返回

	将文件描述符设置为非阻塞方式：
		int setnonblocking(int fd){
			int retValue = fcntl(fd, F_SETFL, fcntl(fd, F_GETFD, 0) | O_NONBLOCK);
			if(retValue != -1){
				return 0;
			}else{
				return -1;
			}
		}

8、epoll
	当服务端在线人数越来越多时，会导致系统资源紧张，I/O 效率越来越慢。

	epoll是 Linux内核为 处理大批句柄而改进的poll，是 Linux特有的 I/O函数。
	特点：
		(1) epoll 是 Linux下多路复用 I/O接口 select/poll的增强版本
			其实现 和 使用方式 与 select/poll有很多不同，epoll通过一组函数来完成有关任务，而不是一个函数。

		(2) epoll 之所以高效，是因为 epoll将用户关心的文件描述符上的事件 放入内核里的一个事件表中，而不是像 select/poll 每次调用都要重复传入文件描述符集 或 事件集。
			比如：当一个事件(如 读操作)发生，epoll无需遍历整个被监听的描述符集，只要遍历那些被内核 I/O事件异步唤醒而加入就绪队列的描述符集合就可以了。
			( select是采用轮询的方式实现，效率随着 fd数增加而降低 )

		(3) epoll 有两种工作方式 (参考 epoll两种工作方式.png)
			ET 边沿触发 edge-triggered			
			LT 水平触发 level-triggered	(是select/poll使用的触发方式，效率低)
			
			通俗的理解：
				例一：比如有一群女孩，有的很漂亮，有的很丑，现在小明要找漂亮的女孩聊天，LT就是要把这一群女孩都看一遍，才可以找到漂亮女孩(就绪事件)。
				ET就是小明的小弟(内核)将 N个漂亮女孩的编号告诉小明，小明直接去找就好。这样更高效

				例二：小明找女神聊天，女神不在家，采用非阻塞方式，小明每隔十分钟到女神家看一次 (select)
				小弟打电话给小明，告诉他：女神回来了，快来吧 (epoll)

		(4) Linux 所能打开的最大 fd触目：cat /proc/sys/fs/file-max
			具体数值和 OS内存有关
9、epoll的三个函数
	(1) int epoll_create(int size);
		创建一个epoll句柄，size用来告诉内核监听的数目，为epoll所支持的最大句柄数。
		使用完epoll后，要关闭：close()

	(2) int epoll_ctl(int epfd, int op, int fd, struct epoll_event *event);
		返回值：成功返回 0，失败返回 -1
		功能：epoll 事件注册
		参数：
			epfd：epoll_create()的返回值
			op：动作，有3个宏表示
				EPOLL_CTL_ADD：注册新的 fd 到 epfd。( 向事件表中注册fd上的事件 )
				EPOLL_CTL_MOD：修改已注册的 fd 的监听事件。( 修改fd上的注册事件 )
				EPOLL_CTL_DEL：从 epfd 中删除一个 fd。( 删除fd上的注册事件 )
			fd：要监听的描述符
			event：告诉内核要监听该事件
				event结构：
					struct epoll_event{
						__uint32_t events;	//epoll events
						epoll_data_t data;	//user data variable
					}
				其中events是描述事件类型 宏 的集合
					EPOLLIN：对应的描述符可读(读事件)
					EPOLLOUT：对应的fd可写
					EPOLLPRI：对应的fd有紧急的数据可读
					EPOLLERR：对应的fd发生错误
					EPOLLHUP：对应的fd被挂断
					EPOLLET：将epoll设为边沿触发模式
					EPOLLONESHOT：只监听一次事件，当监听完这次事件之后，若还要继续监听这个socket，则要再次把这个socket加入EPOLL队列中。

	(3) int epoll_wait(int epfd, struct epoll_event *events, int maxevents, int timeout);
		等待事件的发生，该函数返回要处理的 事件数目。
		( 事件数目：就绪事件的数目，就是那个漂亮女孩数 )

10、服务端使用epoll的步骤
	Step 1：调用epoll_create() 在Linux内核中创建一个事件表。
	Step 2：将文件描述符上的事件(监听套接字listenfd)添加到多创建的事件表中
	Step 3：在主循环中，调用epoll_wait() 等待返回就虚的文件描述符集合
	Step 4：分别处理就绪的事件集合
			(在聊天室这个例子中共有两类事件：新用户连接、用户发来消息)

11、如何将一个socket描述符添加到 内核事件表中
	void addfd(int epfd, int fd, bool enable_set){
		struct epoll_event ev;
		ev.data.fd = fd;
		ev.events = EPOLLIN;

		if(enable_set){
			ev.events = EPOLLIN | EPOLLET;
		}

		epoll_ctl(epfd, EPOLL_CTL_ADD, fd, &ev);

		setnonblocking(fd);
		printf("fd added to epoll!\n");
	}
	//将文件描述符 fd 添加到epfd标识的内核事件表中，并注册 EPOLLIN 和 EPOLLET事件，最后将描述符设置为非阻塞方式。
	//EPOLLIN 是数据可读事件
	//EPOLLET 表明工作方式

12、客户端实现
	(1) 参考 客户端实现.png

	(2) int pipe(int fd[2]);	//创建管道，fd[0] 父进程读，fd[1] 子进程写

	(3) 子进程负责接收用户输入，当检测到用户输入 exit 或 EXIT时，退出chatroom
		这里忽略大小写：
			strncasecmp(const char *s1, char char *s2, size_t n);
			第三个参数要传入 strlen(s2)
			例：char *str = "abc";
				sizeof(str) ===> 4
				strlen(str) ===> 3

	(4) 当有客户端连接时，要将 clientfd加入到 客户端列表中，用于 broadcast，以便其他用户能够收到消息。
		clients_list.push_back(clientfd);	或者用其他方式添加

	(5) 当 Server端关闭导致 client端都关闭之后，在命令行再次输入时会出现错误：write error:Bad address
		怎么解决？？？

	(6) 当关闭 Server之后，再次启动 Server时，有时会报错：bind error:Address already in use
		解决方法：
			int opt = 1;
			listenfd = socket(...);
			if(setsockopt(listenfd, SOL_SOCKET, SO_REUSEADDR, &opt, sizeof(opt)) < 0){
				perror("set sock reuse error");
				exit(-1);
			}

	(7) htons()、ntohs()...
		功能：大小端字节序转换

		TCP/IP 规定网络上传输数据用大端。
		大端：高字节数据 存放在 低地址，低字节数据 存放在 高地址
		小端：高字节数据 存放在 高地址，低字节数据 存放在 低地址

		char 类型数据只占一个字节，不存在大小端问题，这也是一般将数据缓冲区定义成 char类型的原因之一。

		对于 IP地址、端口号这些非 char型数据，必须要在数据发送网络之前 将其转换成大端，在接收到数据之后，转换成符合接收端主机的存储模式。
		发送端主机 ==> 数据转换成大端 ==> 网络 ==> 接收端主机 ==> 转换成本机存储模式

	(8) inet_addr()、inet_aton()、inet_network()
		功能：将点分IP 转换成 二进制IP

		头文件：#include <sys/socket.h>
				#include <netinet/in.h>
				#include <arpa/inet.h>
		区别：inet_aton	返回 网络字节序 的二进制IP
				inet_addr	返回 网络字节序 的二进制IP
				inet_network	返回主机端字节序 的二进制IP

	(9) 在 server/client 退出之前(正常/异常退出)，关闭所有的套接字、描述符。

13、绑定 IP地址的 3种方式
	(1) server.sin_addr.s_addr = htonl(INADDR_ANY);
	(2) inet_aton("12.0.0.1", &server.sin_addr);
	(3) server.sin_addr_s_addr - inet_addr("127.0.0.1");

14、一些功能要求
	(1) 用户可以设置自己的名字
	(2) 再发消息之前，
		sprintf(msg, "%s:%s", name, buf);
		然后将消息发送出去
	(3) 可以设置输出颜色
	(4) 客户端可以这么实现
		创建一个线程，负责接收Server的消息，主线程负责接收stdin输入，并发送给Server

15、一些转换方法
	(1) 整数 <===> 点分十进制IP
		点分十进制 ===> 整数：inet_pton(int af, const char *src, void *dst)	
		整数 ===> 点分十进制：const char *inet_ntop(int af, void *src, char *dst, socketlen_t len);

		例：char ip_dot_dec[20];	//存放点分十进制IP地址
			struct in_addr s;	//IPV4地址结构
			printf("input ip address:\n");	//输入IP地址
			scanf("%s", &ip_dot_dec);

			//转换
			inet_pton(AF_INET, ip_dot_dec, (void *)&s);
			printf("inet_pton : 0x%x\n", s.s_addr);

			inet_ntop(AF_INET, (void *)&s, ip_dot_dec, 16);
			printf("inet_ntop : %s\n", ip_dot_dec);

		输入：127.0.0.1
		输出：0x100007f
			127.0.0.1

select/poll/epoll比较：
	(1) select返回的是 所关注的所有事件的集合，要在事件集中查找 才能判断出哪个套接字上有事件。

	(2) 对比 poll、epoll
		poll：
			int ret = poll(fd, MAX_SOCKET, -1);
			for(i = 0; i < MAX_SOCKET; i++){
				if(fd[i].revents | POLLIN){
					int socket = fd[i].fd;
					process....
				}
			}

		epoll：
			int ret = epoll_wait(epfd, events, MAX_SOCKET, -1);
			for(i = 0; i < ret; i++){
				int socket = events[i].data.fd;
				process....
			}

	(3) 对比 select、epoll
		相同：select、epoll都通过 某种结构体 来告诉内核来监听哪些 fd上的哪些event，并使用该结构体类型的参数来获取内核处理的结果。
		区别：
			(a) select中的 fd_set(只是一个集合)没有将 fd和 event绑定。
				而且每次使用 select之前要重置 fd_set。
			(b) epoll在内核中维护一个事件表(这个事件表用红黑树来实现的)。
				epoll_wait每次都从内核事件表中 取出 用户注册事件，不用从用户态 ===> 内核态的拷贝。
			(c) select采用轮询方式来检测就绪事件
				epoll采用回调方式检测就绪事件。


	(2) 
	(3) 
	(4) 
